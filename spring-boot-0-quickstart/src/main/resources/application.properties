#Spring Boot 会自动扫描classpath下的application.properties文件，如果有就加载文件配置

#自定义属性与加载  cn.hyp.conf.DefinitionConfig.java
cn.hyp.username=PROGRAMMER
cn.hyp.title=Spring Boot
#在application.properties中的各个参数之间也可以直接引用来使用
cn.hyp.desc=${cn.hyp.username}is code refactoring << ${cn.hyp.title} with v2.2.2.RELEASE >>
# 随机字符串
cn.hyp.value=${random.value}
# 随机int
cn.hyp.number=${random.int}
# 随机long
cn.hyp.bignumber=${random.long}
# 10以内的随机数
cn.hyp.random1=${random.int(10)}
# 10-20的随机数
cn.hyp.random2=${random.int[10,20]}


########################################################################################
#Spring Boot中多环境配置文件名需要满足application-{profile}.properties的格式 {profile}对应你的环境标识

#application-dev.properties：开发环境
#application-test.properties：测试环境
#application-prod.properties：生产环境
# 多环境配置文件激活属性---开发、测试、生产
spring.profiles.active=dev

#修改banner
#需要在 resources 目录下添加一个 banner.txt 文件

#Spring Boot支持高亮输出（即 带颜色的输出），但默认是关闭的
#AnsiColor 支持的颜色可以在官网查到 https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/ansi/AnsiColor.html

#${application.version} 				MANIFEST.MF文件中的版本号（目前无法获取到，应该是spring的一个BUG）
#${application.formatted-version} 	上面的的版本号前面加v后上括号
#${spring-boot.version} 				springboot的版本号
#${spring-boot.formatted-version}	上面的的版本号前面加v后上括号

spring.output.ansi.enabled=ALWAYS
spring.banner.location=banner.txt










