#Spring Boot 会自动扫描classpath下的application.properties文件，如果有就加载文件配置



#修改banner
#需要在 resources 目录下添加一个 banner.txt 文件

#Spring Boot支持高亮输出（即 带颜色的输出），但默认是关闭的
#AnsiColor 支持的颜色可以在官网查到 https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/ansi/AnsiColor.html

#${application.version} 				MANIFEST.MF文件中的版本号（目前无法获取到，应该是spring的一个BUG）
#${application.formatted-version} 	上面的的版本号前面加v后上括号
#${spring-boot.version} 				springboot的版本号
#${spring-boot.formatted-version}	上面的的版本号前面加v后上括号
logging:
  level:
    root: info
    org.springframework: info
    org.springframework.jdbc: debug
    org.springframework.boot: info
    org.mybatis: debug
    com.alibaba.druid: debug
    com.github.trang: debug
    executableSql: debug
spring:
  application:
    name: quartz
  banner:
    location: banner.txt
  output:
    ansi:
      enabled: detect
#  h2:
#    console:
#      enabled: true
#      settings:
#        trace: true
  datasource:
#    url: jdbc:mysql://localhost:3306/quartz?characterEncoding=utf-8&useSSL=false
    url: jdbc:h2:mem:quartz
    username: root
#    password: 123456
    password: Biyu5YzU+6sxDRbmWEa3B2uUcImzDo0BuXjTlL505+/pTb+/0Oqd3ou1R6J8+9Fy3CYrM18nBDqf6wAaPgUGOg==
#    driver-class-name: com.mysql.cj.jdbc.Driver
    druid:
      max-wait: 30000
      query-timeout: 10
      validation-query: SELECT 1
      use-global-data-source-stat: true
      # 开启 StatFilter，默认开启，可通过 'enabled: false' 关闭
      stat:
        enabled: true
        log-slow-sql: true
        slow-sql-millis: 1000
      # 开启 Slf4jFilter
      slf4j:
        enabled: true
        data-source-log-enabled: false
        connection-log-enabled: false
        statement-log-enabled: false
        result-set-log-enabled: false
      # 开启 WallFilter
      wall:
        enabled: true
        log-violation: true
        throw-exception: false
        ## WallConfig 配置
        config:
          delete-where-none-check: true
      # 开启 ConfigFilter
      config:
        enabled: true
      # 开启 Web 监控
      web-stat:
        enabled: true
      # 开启 Aop 监控
      aop-stat:
        enabled: true
      # 开启监控页面
      stat-view-servlet:
        enabled: true
    schema: classpath:db/schema.sql
  quartz:
    job-store-type: jdbc
    jdbc:
      initialize-schema: never
    properties:
      org:
        quartz:
          scheduler:
            instanceId: AUTO #默认主机名和时间戳生成实例ID,可以是任何字符串，但对于所有调度程序来说，必须是唯一的 对应qrtz_scheduler_state INSTANCE_NAME字段
            #instanceName: clusteredScheduler #quartzScheduler
          jobStore:
            class: org.quartz.impl.jdbcjobstore.JobStoreTX #持久化配置
            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate #我们仅为数据库制作了特定于数据库的代理
            useProperties: false #以指示JDBCJobStore将JobDataMaps中的所有值都作为字符串，因此可以作为名称 - 值对存储而不是在BLOB列中以其序列化形式存储更多复杂的对象。从长远来看，这是更安全的，因为您避免了将非String类序列化为BLOB的类版本问题。
            tablePrefix: qrtz_  #数据库表前缀
            misfireThreshold: 60000 #在被认为“失火”之前，调度程序将“容忍”一个Triggers将其下一个启动时间通过的毫秒数。默认值（如果您在配置中未输入此属性）为60000（60秒）。
            clusterCheckinInterval: 5000 #设置此实例“检入”*与群集的其他实例的频率（以毫秒为单位）。影响检测失败实例的速度。
            isClustered: true #打开群集功能
          threadPool: #连接池
            class: org.quartz.simpl.SimpleThreadPool
            threadCount: 10
            threadPriority: 5
            threadsInheritContextClassLoaderOfInitializingThread: true
  jackson:
    default-property-inclusion: non_null
    time-zone: GMT+8
    date-format: yyyy-MM-dd HH:mm:ss
    serialization:
      indent_output: true
      write_null_map_values: true
      write_dates_as_timestamps: false
    deserialization:
      fail_on_unknown_properties: false
    parser:
      allow_unquoted_control_chars: true
      allow_single_quotes: true
  thymeleaf:
    cache: false


mybatis:
  mapper-locations: mapper/*.xml
  type-aliases-package: com.hyp.learn.quartz.entity
  configuration:
    #自动驼峰命名规则( camel case )映射
    map-underscore-to-camel-case: true
    log-impl: org.apache.ibatis.logging.slf4j.Slf4jImpl
    log-prefix: executableSql.

server:
  servlet:
    context-path: /quartz
  port: 8080


